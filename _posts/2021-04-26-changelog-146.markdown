---
layout: post
title: "IntelliJ Rust Changelog #146"
date: 2021-04-26 17:00:00 +0300
---


## New Features

* Provide initial experimental support for [custom derive]
  procedural macros. Now the plugin can expand such procedural macro calls and take into account expanded `impl` items
  in type inference and name resolution (other types of items are ignored for now).<br/>
  Note, it’s only an initial implementation,
  so it may work in an unexpected way in some cases. The feature is disabled by default for now. To turn it on, you
  should enable `Use experimental name resolution engine` option in `Preferences | Languages & Frameworks | Rust`
  settings and enable `org.rust.cargo.evaluate.build.scripts` and `org.rust.macros.proc` experimental features
  (see instructions [here][experimental features]).
  Don’t forget to reload a project structure after enabling the corresponding features via `Refresh Cargo Projects`
  action on Cargo tool window. See [tracking issue](https://github.com/intellij-rust/intellij-rust/issues/6908) for
  more details and the current status of procedural macros support

  {% include gif-img.html path="/assets/posts/changelog-146/custom-derive" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6992 -->

* Now the plugin takes [Cargo config] into account during evaluation of [`cfg` conditions][cfg].
  Note, it works since Rust 1.52.0 (currently in beta)

  {% include gif-img.html path="/assets/posts/changelog-146/cfg-cargo-config" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7093 -->

* Provide an intention action that toggles feature state from a `cfg` attribute (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-146/intention-cargo-feature" w="600px" %}
  By the way, we have a [blogpost][cargo features blogpost] about cargo features support
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6845 -->
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7115 -->

* Provide `Share in Playground` intention action to share a selected Rust code on [Rust Playground](https://play.rust-lang.org).

  {% include gif-img.html path="/assets/posts/changelog-146/intention-playground" w="600px" %}
  Previously, this feature was only available as an action in right-click menu.
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7071 -->

* Improve [code folding]:

  * Support folding for multiline `where` clauses (by [@Stzx])

    {% include gif-img.html path="/assets/posts/changelog-146/fold-where" w="600px" %}
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7111 -->

  * Support folding by default for series of use items (by [@Stzx])<br>
    The option is **enabled** by default.
    You can disable it in `Settings | Editor | General | Code Folding | General | imports`
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7112 -->

  * Support folding by default for function bodies (by [@Stzx])<br>
    The option is **disabled** by default.
    `imports` (actually use items) and `method bodies` (actually function bodies)
    You can enable it in `Settings | Editor | General | Code Folding | General | method bodies`
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7112 -->

* Provide an intention action to expand dependency specification in `Cargo.toml`

  {% include gif-img.html path="/assets/posts/changelog-146/intention-expand-dependency" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6960 -->

* Provide an intention action to create a struct from an unresolved struct literal (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-146/intention-struct" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6837 -->

* Improve experimental crate-local index:

  * Add `Cargo.toml` inspection that checks crate dependency version requirements that do not match any known crate version (by [@Kobzol])
    <!-- https://github.com/intellij-rust/intellij-rust/pull/6801 -->

  * Use semantic versioning to improve version sorting in dependency completion
    <!-- https://github.com/intellij-rust/intellij-rust/pull/6599 -->

  Note, the corresponding feature is disabled by default for now. To use it, enable
  `org.rust.crates.local.index` experimental feature (see instructions [here][experimental features])

* Drop support of `org.rust.cargo.evaluate.build.scripts` experimental feature.
  Use `org.rust.cargo.evaluate.build.scripts` instead if you need to evaluate
  `env!("OUT_DIR")` in your `include!` macro calls
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7142 -->

<!-- https://github.com/intellij-rust/intellij-rust/pull/6581 -->
<!-- * Introduce navigation bar breadcrumbs. (by [@Kobzol]) -->
<!-- disabled in https://github.com/intellij-rust/intellij-rust/pull/7154 -->

## Fixes

* Improve `Use destructuring declaration` intention action: replace usages of destructured variable (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-146/intention-destructure-decl" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/5650 -->

* Allow explicitly stating the function return type in `Create function` if the inferred return type was unknown. (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-146/intention-create-function" w="600px" %}
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6986 -->

* Name resolution fixes:

  * Fix name resolution: correctly resolve qualified attribute proc macro paths (like `#[foo::bar]`)
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7119 -->

  * Fix name resolution: resolve field shorthand to a local variable in the case of unresolved struct literal
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7132 -->

* New name resolution fixes

  * Fix name resolution: correctly resolve macros with absolute paths (like `::foo::bar!()`) with new name resolution engine
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7089 -->

  * Exclude some cfg-disabled items from completion when using new name resolution engine
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7057 -->

* `Change Signature` refactoring fixes:

  * Fix some false positives in name conflict detection (by [@Kobzol])
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7081 -->

  * Do not needlessly import default type arguments (by [@Kobzol])
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7080 -->

  * Correctly place function visibility after attributes (by [@Kobzol])
    <!-- https://github.com/intellij-rust/intellij-rust/pull/7076 -->

* Fix auto-import: insert correct import in the case of a renamed cargo package
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7108 -->

* Fix false positive in `Needless lifetimes` inspection when the lifetime is used in where clause. (by [@Kobzol])
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7101 -->

* Improve built-in formatter: add line break after opening brace in struct blocks (by [@Kobzol])
  <!-- https://github.com/intellij-rust/intellij-rust/pull/5491 -->

* Fix false-positive proofreading warnings for sentences written in several sequential Rust comments.
  Note, you can enable/disable proofreading in Rust files in `Preferences | Editor | Proofreading | Grammar` settings
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7131 -->

* Refresh Cargo project automatically when workspace-root `Cargo.toml` file is changed (and saved).
  Previously it was work only for package `Cargo.toml` files.
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7121 -->

* Fix proc macro expansion if proc macro crate is added as separate cargo project in `Cargo` toolwindow
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7079 -->

* Place `Show the result of macro expansion` intention lower in the intention list
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7072 -->

* Don't run inspections on Rust files outside a valid Cargo project
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6013 -->

* Don't show errors related to Rust edition if we don't known the edition (by [@Stzx])
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7070 -->

* Fix experimental crate-local index: don't perform code completion and run inspections if the index is not ready
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7004 -->

* Fix `Can't find process starter` error when running DTrace profiler with CLion 2021.1
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7150 -->

* Avoid Cargo project duplication in the project model. This fixes some issues related to such duplications
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6201 -->

## Internal Improvements

* Don't show "Tip of the Day" at startup in internal IDEs (for the plugin developers)
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7114 -->

* Enable Gradle Build Cache for local builds
  (see [#7094](https://github.com/intellij-rust/intellij-rust/pull/7094) for more details)
  <!-- https://github.com/intellij-rust/intellij-rust/pull/7094 -->

* Introduce `2021` edition variant in the plugin and adjust the corresponding code
  <!-- https://github.com/intellij-rust/intellij-rust/pull/6903 -->

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/54?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@Stzx]: https://github.com/Stzx
[@abn]: https://github.com/abn

[custom derive]: https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros
[experimental features]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features
[Cargo config]: https://doc.rust-lang.org/cargo/reference/config.html
[cfg]: https://doc.rust-lang.org/reference/conditional-compilation.html
[cargo features blogpost]: https://blog.jetbrains.com/clion/2020/10/intellij-rust-new-functionality-for-cargo-features/
[code folding]: https://www.jetbrains.com/help/idea/working-with-source-code.html#code_folding
