---
layout: post
title: "IntelliJ Rust Changelog #146"
date: 2021-04-26 14:00:00 +0300
---


## New Features

* [#6992] Provide initial experimental support for [custom derive]
  procedural macros. Now the plugin can expand such procedural macro calls and take into account expanded `impl` items
  in type inference and name resolution (other types of items are ignored for now).<br/>
  Note, it’s only an initial implementation,
  so it may work in an unexpected way in some cases. The feature is disabled by default for now. To turn it on, you
  should enable `Use experimental name resolution engine` option in `Preferences | Languages & Frameworks | Rust`
  settings and enable `org.rust.cargo.evaluate.build.scripts` and `org.rust.macros.proc` [experimental features][experimental features].
  Don’t forget to reload a project structure after enabling the corresponding features via `Refresh Cargo Projects`
  action on Cargo tool window. See [tracking issue](https://github.com/intellij-rust/intellij-rust/issues/6908) for
  more details and the current status of procedural macros support

  {% include gif-img-wh.html path="/assets/posts/changelog-146/custom-derive" w="600px" h="300px" %}

* [#7093] Now the plugin takes [Cargo config] into account during evaluation of [`cfg` conditions][cfg].
  Note, it works since Rust 1.52.0 (currently in beta)

  {% include gif-img-wh.html path="/assets/posts/changelog-146/cfg-cargo-config" w="600px" h="300px" %}

* Introduce new intention actions:

  * [#6845], [#7115] `Enable/Disable feature state` to toggles feature state from a `cfg` attribute (by [@Kobzol])

    {% include gif-img-wh.html path="/assets/posts/changelog-146/intention-cargo-feature" w="600px" h="300px" %}
    By the way, we have a [blog post][cargo features blogpost] about cargo features support

  * [#7071] `Share in Playground` to share a selected Rust code on [Rust Playground](https://play.rust-lang.org)

    {% include gif-img.html path="/assets/posts/changelog-146/intention-playground" w="600px" %}
    Previously, this feature was only available as `Rust | Share in Playground` action in `Tools` and context menus

  * [#6960] `Expand dependency specification` for `Cargo.toml`

    {% include gif-img-wh.html path="/assets/posts/changelog-146/intention-expand-dependency" w="600px" h="300px" %}

  * [#6837] `Create struct` to create a struct from an unresolved struct literal (by [@Kobzol])

    {% include gif-img-wh.html path="/assets/posts/changelog-146/intention-struct" w="600px" h="300px" %}

* [#5650] Now `Use destructuring declaration` intention action replaces usages of destructured variable (by [@Kobzol])

  {% include gif-img-wh.html path="/assets/posts/changelog-146/intention-destructure-decl" w="600px" h="150px" %}

* [#6986] Allow specifying the function return type in `Create function` intention action if the inferred return type
  is unknown (by [@Kobzol])

  {% include gif-img-wh.html path="/assets/posts/changelog-146/intention-create-function" w="600px" h="300px" %}

* Improve [code folding]:

  * [#7111] Support folding for multiline `where` clauses (by [@Stzx])

    {% include gif-img-wh.html path="/assets/posts/changelog-146/fold-where" w="600px" h="300px" %}

  * [#7112] Enable folding for series of use items by default (by [@Stzx])<br>
    You can disable it via `Imports` option in `Settings | Editor | General | Code Folding` settings

  * [#7112] Support `Method bodies` option of `Settings | Editor | General | Code Folding - General` settings
    to fold function/method bodies by default (by [@Stzx])

* Improve experimental [crate-local index](https://github.com/intellij-rust/intellij-rust/issues/6463):

  * [#6801] Add `Cargo.toml` inspection that checks crate dependency version requirements that do not match any known
    crate version (by [@Kobzol])

  * [#6599] Use semantic versioning to improve version sorting in dependency completion

  * [#7004] Don't perform code completion and run inspections if the index is not ready

  Note, the corresponding feature is disabled by default for now. To use it, enable
  `org.rust.crates.local.index` [experimental feature][experimental features]

* [#7142] Drop support of `org.rust.cargo.fetch.out.dir` experimental feature.
  Use `org.rust.cargo.evaluate.build.scripts` instead if you need to evaluate
  `env!("OUT_DIR")` in your `include!` macro calls

## Fixes

* Name resolution fixes:

  * [#7119] Correctly resolve qualified [attribute](https://doc.rust-lang.org/reference/procedural-macros.html#attribute-macros)
    procedural macro paths (like `#[foo::bar]`)

  * [#7132] Resolve [field shorthand](https://doc.rust-lang.org/edition-guide/rust-2018/data-types/field-init-shorthand.html)
    to a local variable in the case of unresolved struct literal

* Improvements of [new name resolution](https://github.com/intellij-rust/intellij-rust/issues/6217) engine:

  * [#7089] Correctly resolve macros with absolute paths (like `::foo::bar!()`)

  * [#7057] Exclude some cfg-disabled items from completion

* `Change Signature` refactoring (`Refactor | Change Signature` or <kbd>Ctrl</kbd>+<kbd>F6</kbd>) fixes:

  * [#7081] Fix some false positives in name conflict detection (by [@Kobzol])

  * [#7080] Do not needlessly import default type arguments (by [@Kobzol])

  * [#7076] Correctly place function visibility after attributes (by [@Kobzol])

* [#7108] Insert correct `use` item by auto-import feature in the case of a
  [renamed](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml)
  Cargo package

* [#7101] Fix false positive in `Needless lifetimes` inspection when the lifetime is used in `where` clause (by [@Kobzol])

* [#5491] Add line break after opening brace in struct blocks by built-in formatter (by [@Kobzol])

* [#7131] Fix false-positive proofreading warnings for sentences written in several sequential Rust comments.
  Note, you can enable/disable proofreading in Rust files in `Preferences | Editor | Proofreading | Grammar` settings

* [#7121] Reload project model automatically when workspace-root `Cargo.toml` file is changed (and saved).
  Previously it was work only for package `Cargo.toml` files

* [#7079] Fix proc macro expansion if proc macro crate is added as separate cargo project in `Cargo` tool window

* [#7072] Place `Show the result of macro expansion` intention lower in the intention list

* [#6013] Don't run some inspections on Rust files outside a valid Cargo project to avoid expected false positive errors

* [#7070] Don't show errors related to Rust edition if we don't known the edition (by [@Stzx])

* [#7150] Fix `Can't find process starter` error when running DTrace
  [profiler](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-profiler.html) with CLion 2021.1

* [#6201] Avoid Cargo project duplication in the project model. This fixes some issues related to such duplications

## Internal Improvements

* [#7114] Don't show "Tip of the Day" at startup in internal IDEs (for the plugin developers)

* [#7094] Enable Gradle Build Cache for local builds
  (see [#7094](https://github.com/intellij-rust/intellij-rust/pull/7094) for more details)

* [#6903] Introduce `2021` edition variant in the plugin and adjust the corresponding code

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/54?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@Stzx]: https://github.com/Stzx

[#5491]: https://github.com/intellij-rust/intellij-rust/pull/5491
[#5650]: https://github.com/intellij-rust/intellij-rust/pull/5650
[#6013]: https://github.com/intellij-rust/intellij-rust/pull/6013
[#6201]: https://github.com/intellij-rust/intellij-rust/pull/6201
[#6599]: https://github.com/intellij-rust/intellij-rust/pull/6599
[#6801]: https://github.com/intellij-rust/intellij-rust/pull/6801
[#6837]: https://github.com/intellij-rust/intellij-rust/pull/6837
[#6845]: https://github.com/intellij-rust/intellij-rust/pull/6845
[#6903]: https://github.com/intellij-rust/intellij-rust/pull/6903
[#6960]: https://github.com/intellij-rust/intellij-rust/pull/6960
[#6986]: https://github.com/intellij-rust/intellij-rust/pull/6986
[#6992]: https://github.com/intellij-rust/intellij-rust/pull/6992
[#7004]: https://github.com/intellij-rust/intellij-rust/pull/7004
[#7046]: https://github.com/intellij-rust/intellij-rust/pull/7046
[#7057]: https://github.com/intellij-rust/intellij-rust/pull/7057
[#7070]: https://github.com/intellij-rust/intellij-rust/pull/7070
[#7071]: https://github.com/intellij-rust/intellij-rust/pull/7071
[#7072]: https://github.com/intellij-rust/intellij-rust/pull/7072
[#7076]: https://github.com/intellij-rust/intellij-rust/pull/7076
[#7079]: https://github.com/intellij-rust/intellij-rust/pull/7079
[#7080]: https://github.com/intellij-rust/intellij-rust/pull/7080
[#7081]: https://github.com/intellij-rust/intellij-rust/pull/7081
[#7089]: https://github.com/intellij-rust/intellij-rust/pull/7089
[#7093]: https://github.com/intellij-rust/intellij-rust/pull/7093
[#7094]: https://github.com/intellij-rust/intellij-rust/pull/7094
[#7100]: https://github.com/intellij-rust/intellij-rust/pull/7100
[#7101]: https://github.com/intellij-rust/intellij-rust/pull/7101
[#7108]: https://github.com/intellij-rust/intellij-rust/pull/7108
[#7111]: https://github.com/intellij-rust/intellij-rust/pull/7111
[#7112]: https://github.com/intellij-rust/intellij-rust/pull/7112
[#7114]: https://github.com/intellij-rust/intellij-rust/pull/7114
[#7115]: https://github.com/intellij-rust/intellij-rust/pull/7115
[#7119]: https://github.com/intellij-rust/intellij-rust/pull/7119
[#7121]: https://github.com/intellij-rust/intellij-rust/pull/7121
[#7131]: https://github.com/intellij-rust/intellij-rust/pull/7131
[#7132]: https://github.com/intellij-rust/intellij-rust/pull/7132
[#7142]: https://github.com/intellij-rust/intellij-rust/pull/7142
[#7150]: https://github.com/intellij-rust/intellij-rust/pull/7150

[custom derive]: https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros
[experimental features]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features
[Cargo config]: https://doc.rust-lang.org/cargo/reference/config.html
[cfg]: https://doc.rust-lang.org/reference/conditional-compilation.html
[cargo features blogpost]: https://blog.jetbrains.com/clion/2020/10/intellij-rust-new-functionality-for-cargo-features/
[code folding]: https://www.jetbrains.com/help/idea/working-with-source-code.html#code_folding
